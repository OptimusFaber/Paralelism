# This viminfo file was generated by Vim 8.0.
# You may edit it if you're careful!

# Viminfo version
|1,4

# Value of 'encoding' when this file was written
*encoding=latin1


# hlsearch on (H) or off (h):
~h
# Last Search Pattern:
~Msle0~/\<nclude\>

# Command Line History (newest to oldest):
:x
|2,0,1646880522,,"x"
:wq
|2,0,1645678942,,"wq"
:dG
|2,0,1645674188,,"dG"
:dg
|2,0,1645674171,,"dg"
:qw
|2,0,1645672671,,"qw"
:qv
|2,0,1645672660,,"qv"

# Search String History (newest to oldest):
? \<nclude\>
|2,1,1646282904,,"\\<nclude\\>"

# Expression History (newest to oldest):

# Input Line History (newest to oldest):

# Debug Line History (newest to oldest):

# Registers:
""1	LINE	0
	#include <stdio.h>
	#include <stdlib.h>
	#include <math.h>
	#define n 128
	
	int main() {
	    double **u = (double **) calloc(n, sizeof(double *));
	    double **up = (double **) calloc(n, sizeof(double *));
	    for (int i = 0; i < n; i++) {
	        u[i] = (double *) calloc(n, sizeof(double));
	        up[i] = (double *) calloc(n, sizeof(double));
	    }
	
	    double x1 = 10.0;
	    double x2 = 20.0;
	    double y1 = 20.0;
	    double y2 = 30.0;
	    u[0][0] = up[0][0] = x1;
	    u[0][n-1] = up[0][n-1] = x2;
	    u[n-1][0] = up[n-1][0] = y1;
	    u[n-1][n-1] = up[n-1][n-1] = y2;
	
	    double step1 = 10.0/(n-1);
	#pragma acc kernels
	    for (int i = 1; i<n-1; i++){
	        u[0][i] = up[0][i] = x1 + i*step1;
	        u[n-1][i] = up[n-1][i] = y1 + i*step1;
	        u[i][0] = up[i][0] = x1 + i*step1;
	        u[i][n-1] = up[i][n-1] = x2 + i*step1;
	    }
	
	    int itter = 0;
	    double error = 1.0;
	#pragma acc data copy(u[0:n][0:n]) create(up[0:n][0:n], error)
	    {
	        while (itter < 1000000 && error > 1e-6) {
	            error = 0.0;
	            itter++;
	#pragma acc data present(u, up)
	#pragma acc kernels async(1)
	            {
	#pragma acc loop collapse(2) independent reduction(max:error)
	                for (int i = 1; i < n - 1; i++) {
	                    for (int j = 1; j < n - 1; j++) {
	                        up[i][j] = 0.25 * (u[i][j - 1] + u[i][j + 1] + u[i + 1][j] + u[i - 1][j]);
	                        error = fmax(error, fabs(up[i][j] - u[i][j]));
	                    }
	                }
	            }
	#pragma acc kernels async(1)
|3,1,1,1,50,0,1646880514,"#include <stdio.h>","#include <stdlib.h>","#include <math.h>","#define n 128","","int main() {","    double **u = (double **) calloc(n, sizeof(double *));","    double **up = (double **) calloc(n, sizeof(double *));","    for (int i = 0; i < n; i++) {","        u[i] = (double *) calloc(n, sizeof(double));","        up[i] = (double *) calloc(n, sizeof(double));","    }","","    double x1 = 10.0;","    double x2 = 20.0;",>23
|<"    double y1 = 20.0;","    double y2 = 30.0;","    u[0][0] = up[0][0] = x1;","    u[0][n-1] = up[0][n-1] = x2;","    u[n-1][0] = up[n-1][0] = y1;","    u[n-1][n-1] = up[n-1][n-1] = y2;","","    double step1 = 10.0/(n-1);","#pragma acc kernels","    for (int i = 1; i<n-1; i++){","        u[0][i] = up[0][i] = x1 + i*step1;","        u[n-1][i] = up[n-1][i] = y1 + i*step1;","        u[i][0] = up[i][0] = x1 + i*step1;","        u[i][n-1] = up[i][n-1] = x2 + i*step1;","    }","",>20
|<"    int itter = 0;","    double error = 1.0;","#pragma acc data copy(u[0:n][0:n]) create(up[0:n][0:n], error)","    {","        while (itter < 1000000 && error > 1e-6) {","            error = 0.0;","            itter++;","#pragma acc data present(u, up)","#pragma acc kernels async(1)","            {","#pragma acc loop collapse(2) independent reduction(max:error)","                for (int i = 1; i < n - 1; i++) {","                    for (int j = 1; j < n - 1; j++) {",>100
|<"                        up[i][j] = 0.25 * (u[i][j - 1] + u[i][j + 1] + u[i + 1][j] + u[i - 1][j]);","                        error = fmax(error, fabs(up[i][j] - u[i][j]));","                    }","                }","            }","#pragma acc kernels async(1)"
"2	LINE	0
	#include <stdio.h>
	#include <stdlib.h>
	#include <math.h>
	#define n 256
	
	int main() {
	    double **u = (double **) calloc(n, sizeof(double *));
	    double **up = (double **) calloc(n, sizeof(double *));
	    for (int i = 0; i < n; i++) {
	        u[i] = (double *) calloc(n, sizeof(double));
	        up[i] = (double *) calloc(n, sizeof(double));
	    }
	
	    double x1 = 10.0;
	    double x2 = 20.0;
	    double y1 = 20.0;
	    double y2 = 30.0;
	    u[0][0] = up[0][0] = x1;
	    u[0][n-1] = up[0][n-1] = x2;
	    u[n-1][0] = up[n-1][0] = y1;
	    u[n-1][n-1] = up[n-1][n-1] = y2;
	
	    double step1 = 10.0/(n-1);
	#pragma acc kernels
	    for (int i = 1; i<n-1; i++){
	        u[0][i] = up[0][i] = x1 + i*step1;
	        u[n-1][i] = up[n-1][i] = y1 + i*step1;
	        u[i][0] = up[i][0] = x1 + i*step1;
	        u[i][n-1] = up[i][n-1] = x2 + i*step1;
	    }
	
	    int itter = 0;
	    double error = 1.0;
	
	#pragma acc data copy(u, error) create (up, error)    {
	        while (itter < 1000000 && error > 1e-6) {
	            error = 0.0;
	            itter++;
	#pragma acc data present(u, up)
	#pragma acc kernels async(1)
	            {
	#pragma acc loop collapse(2) independent reduction(max:error)
	                for (int i = 1; i < n - 1; i++) {
	                    for (int j = 1; j < n - 1; j++) {
	                        up[i][j] = 0.25 * (u[i][j - 1] + u[i][j + 1] + u[i + 1][j] + u[i - 1][j]);
	                        error = fmax(error, fabs(up[i][j] - u[i][j]));
	                    }
	                }
	            }
	#pragma acc kernels async(1)
|3,0,2,1,50,0,1646879860,"#include <stdio.h>","#include <stdlib.h>","#include <math.h>","#define n 256","","int main() {","    double **u = (double **) calloc(n, sizeof(double *));","    double **up = (double **) calloc(n, sizeof(double *));","    for (int i = 0; i < n; i++) {","        u[i] = (double *) calloc(n, sizeof(double));","        up[i] = (double *) calloc(n, sizeof(double));","    }","","    double x1 = 10.0;","    double x2 = 20.0;",>23
|<"    double y1 = 20.0;","    double y2 = 30.0;","    u[0][0] = up[0][0] = x1;","    u[0][n-1] = up[0][n-1] = x2;","    u[n-1][0] = up[n-1][0] = y1;","    u[n-1][n-1] = up[n-1][n-1] = y2;","","    double step1 = 10.0/(n-1);","#pragma acc kernels","    for (int i = 1; i<n-1; i++){","        u[0][i] = up[0][i] = x1 + i*step1;","        u[n-1][i] = up[n-1][i] = y1 + i*step1;","        u[i][0] = up[i][0] = x1 + i*step1;","        u[i][n-1] = up[i][n-1] = x2 + i*step1;","    }","",>20
|<"    int itter = 0;","    double error = 1.0;","","#pragma acc data copy(u, error) create (up, error)    {","        while (itter < 1000000 && error > 1e-6) {","            error = 0.0;","            itter++;","#pragma acc data present(u, up)","#pragma acc kernels async(1)","            {","#pragma acc loop collapse(2) independent reduction(max:error)","                for (int i = 1; i < n - 1; i++) {","                    for (int j = 1; j < n - 1; j++) {",>100
|<"                        up[i][j] = 0.25 * (u[i][j - 1] + u[i][j + 1] + u[i + 1][j] + u[i - 1][j]);","                        error = fmax(error, fabs(up[i][j] - u[i][j]));","                    }","                }","            }","#pragma acc kernels async(1)"
"3	LINE	0
	#include <stdio.h>
	#include <stdlib.h>
	#include <math.h>
	#define n 128
	
	int main() {
		    double **u = (double **) calloc(n, sizeof(double *)); // first
		        double **up = (double **) calloc(n, sizeof(double *));  // second
			    for (int i = 0; i < n; i++) {
				            u[i] = (double *) calloc(n, sizeof(double));
					            up[i] = (double *) calloc(n, sizeof(double));
						        }
	
			        double x1 = 10.0;
				    double x2 = 20.0;
				        double y1 = 30.0;
					    double y2 = 20.0;
					        u[0][0] = up[0][0] = x1;
						    u[0][n-1] = up[0][n-1] = x2;
						        u[n-1][0] = up[n-1][0] = y1;
							    u[n-1][n-1] = up[n-1][n-1] = y2;
	
							        double step1 = (x2 - x1)/(n-1);
								    double step2 = (y2 - y1)/(n-1);
								        double step3 = (y1 - x1)/(n-1);
	#pragma acc loop independent
									    for (int i = 1; i<n-1; i++){
										            u[0][i] = x1 + i*step1;
											            u[n-1][i] = y1 + i*step2;
												            u[i][0] = x1 + i*step3;
													            u[i][n-1] = 20.0;
														        }
	
									        int itter = 0;
										    double error = 1.0;
	
	#pragma acc data copy(u[0:n][0:n], error) create (up[0:n][0:n])
										        {
												        while (itter < 1000000 && error > 1e-6) {
														            itter++;
															                if (itter % 100 == 0){
																		                error = 0;
																				            }
	#pragma acc data present(u, up)
	#pragma acc parallel num_gangs(n) async
																	            {
	#pragma acc loop collapse(2) independent reduction(max:error)
																			                    for (int i = 1; i < n - 1; i++) {
																						                        for (int j = 1; j < n - 1; j++) {
																										                        up[i][j] = 0.25 * (u[i][j - 1] + u[i][j + 1] + u[i + 1][j] + u[i - 1][j]);
|3,0,3,1,50,0,1646284006,"#include <stdio.h>","#include <stdlib.h>","#include <math.h>","#define n 128","","int main() {","	    double **u = (double **) calloc(n, sizeof(double *)); // first","	        double **up = (double **) calloc(n, sizeof(double *));  // second","		    for (int i = 0; i < n; i++) {","			            u[i] = (double *) calloc(n, sizeof(double));","				            up[i] = (double *) calloc(n, sizeof(double));","					        }","",>29
|<"		        double x1 = 10.0;","			    double x2 = 20.0;","			        double y1 = 30.0;","				    double y2 = 20.0;","				        u[0][0] = up[0][0] = x1;","					    u[0][n-1] = up[0][n-1] = x2;","					        u[n-1][0] = up[n-1][0] = y1;","						    u[n-1][n-1] = up[n-1][n-1] = y2;","","						        double step1 = (x2 - x1)/(n-1);","							    double step2 = (y2 - y1)/(n-1);","							        double step3 = (y1 - x1)/(n-1);","#pragma acc loop independent",>42
|<"								    for (int i = 1; i<n-1; i++){","									            u[0][i] = x1 + i*step1;","										            u[n-1][i] = y1 + i*step2;","											            u[i][0] = x1 + i*step3;","												            u[i][n-1] = 20.0;","													        }","","								        int itter = 0;","									    double error = 1.0;","","#pragma acc data copy(u[0:n][0:n], error) create (up[0:n][0:n])","									        {","											        while (itter < 1000000 && error > 1e-6) {",>35
|<"													            itter++;","														                if (itter % 100 == 0){","																	                error = 0;","																			            }","#pragma acc data present(u, up)","#pragma acc parallel num_gangs(n) async","																            {","#pragma acc loop collapse(2) independent reduction(max:error)","																		                    for (int i = 1; i < n - 1; i++) {",>80
|<"																					                        for (int j = 1; j < n - 1; j++) {","																									                        up[i][j] = 0.25 * (u[i][j - 1] + u[i][j + 1] + u[i + 1][j] + u[i - 1][j]);"
"4	LINE	0
	#include <stdio.h>
	#include <stdlib.h>
	#include <math.h>
	#define n 128
	
	int main() {
		    double **u = (double **) calloc(n, sizeof(double *)); // first
		        double **up = (double **) calloc(n, sizeof(double *));  // second
			    for (int i = 0; i < n; i++) {
				            u[i] = (double *) calloc(n, sizeof(double));
					            up[i] = (double *) calloc(n, sizeof(double));
						        }
	
			        double x1 = 10.0;
				    double x2 = 20.0;
				        double y1 = 30.0;
					    double y2 = 20.0;
					        u[0][0] = up[0][0] = x1;
						    u[0][n-1] = up[0][n-1] = x2;
						        u[n-1][0] = up[n-1][0] = y1;
							    u[n-1][n-1] = up[n-1][n-1] = y2;
	
							        double step1 = (x2 - x1)/(n-1);
								    double step2 = (y2 - y1)/(n-1);
								        double step3 = (y1 - x1)/(n-1);
	#pragma acc kernels
									    for (int i = 1; i<n-1; i++){
										            u[0][i] = x1 + i*step1;
											            u[n-1][i] = y1 + i*step2;
												            u[i][0] = x1 + i*step3;
													            u[i][n-1] = 20.0;
														        }
	
									        int itter = 0;
										    double error = 1.0;
	
	#pragma acc data copy(u[0:n][0:n], error) create (up[0:n][0:n])
										        {
												        while (itter < 1000000 && error > 1e-6) {
														            if (itter % 100 == 0) {
	#pragma acc kernels async
																                    error = 0.0;
																		                }
															                itter++;
	#pragma acc data present(u, up)
	#pragma acc parallel num_gangs(n) async
																	            {
																			                    if (itter % 100 == 0) {
	#pragma acc loop collapse(2) independent reduction(max:error)
																						                        for (int i = 1; i < n - 1; i++) {
|3,0,4,1,50,0,1646283928,"#include <stdio.h>","#include <stdlib.h>","#include <math.h>","#define n 128","","int main() {","	    double **u = (double **) calloc(n, sizeof(double *)); // first","	        double **up = (double **) calloc(n, sizeof(double *));  // second","		    for (int i = 0; i < n; i++) {","			            u[i] = (double *) calloc(n, sizeof(double));","				            up[i] = (double *) calloc(n, sizeof(double));","					        }","",>29
|<"		        double x1 = 10.0;","			    double x2 = 20.0;","			        double y1 = 30.0;","				    double y2 = 20.0;","				        u[0][0] = up[0][0] = x1;","					    u[0][n-1] = up[0][n-1] = x2;","					        u[n-1][0] = up[n-1][0] = y1;","						    u[n-1][n-1] = up[n-1][n-1] = y2;","","						        double step1 = (x2 - x1)/(n-1);","							    double step2 = (y2 - y1)/(n-1);","							        double step3 = (y1 - x1)/(n-1);","#pragma acc kernels",>42
|<"								    for (int i = 1; i<n-1; i++){","									            u[0][i] = x1 + i*step1;","										            u[n-1][i] = y1 + i*step2;","											            u[i][0] = x1 + i*step3;","												            u[i][n-1] = 20.0;","													        }","","								        int itter = 0;","									    double error = 1.0;","","#pragma acc data copy(u[0:n][0:n], error) create (up[0:n][0:n])","									        {","											        while (itter < 1000000 && error > 1e-6) {",>50
|<"													            if (itter % 100 == 0) {","#pragma acc kernels async","															                    error = 0.0;","																	                }","														                itter++;","#pragma acc data present(u, up)","#pragma acc parallel num_gangs(n) async","																            {","																		                    if (itter % 100 == 0) {","#pragma acc loop collapse(2) independent reduction(max:error)",>80
|<"																					                        for (int i = 1; i < n - 1; i++) {"
"5	LINE	0
	#include <stdio.h>
	#include <stdlib.h>
	#include <math.h>
	#define n 128
	
	int main() {
		    double **u = (double **) calloc(n, sizeof(double *)); // first
		        double **up = (double **) calloc(n, sizeof(double *));  // second
			    for (int i = 0; i < n; i++) {
				            u[i] = (double *) calloc(n, sizeof(double));
					            up[i] = (double *) calloc(n, sizeof(double));
						        }
	
			        double x1 = 10.0;
				    double x2 = 20.0;
				        double y1 = 30.0;
					    double y2 = 20.0;
					        u[0][0] = up[0][0] = x1;
						    u[0][n-1] = up[0][n-1] = x2;
						        u[n-1][0] = up[n-1][0] = y1;
							    u[n-1][n-1] = up[n-1][n-1] = y2;
	
							        double step1 = (x2 - x1)/(n-1);
								    double step2 = (y2 - y1)/(n-1);
								        double step3 = (y1 - x1)/(n-1);
	#pragma acc loop independent
									    for (int i = 1; i<n-1; i++){
										            u[0][i] = x1 + i*step1;
											            u[n-1][i] = y1 + i*step2;
												            u[i][0] = x1 + i*step3;
													            u[i][n-1] = 20.0;
														        }
	
									        int itter = 0;
										    double error = 1.0;
	
	#pragma acc data copy(u[0:n][0:n], error) create (up[0:n][0:n])
										        {
												        while (itter < 1000000 && error > 1e-6) {
														            if (itter % 100 == 0){
	#pragma acc kernels async
																                    error = 0;
																		                }
															                itter++;
	#pragma acc data present(u, up)
	#pragma acc parallel num_gangs(n) async
																	            {
	#pragma acc loop collapse(2) independent reduction(max:error)
																			                    for (int i = 1; i < n - 1; i++) {
																						                        for (int j = 1; j < n - 1; j++) {
|3,0,5,1,50,0,1646283860,"#include <stdio.h>","#include <stdlib.h>","#include <math.h>","#define n 128","","int main() {","	    double **u = (double **) calloc(n, sizeof(double *)); // first","	        double **up = (double **) calloc(n, sizeof(double *));  // second","		    for (int i = 0; i < n; i++) {","			            u[i] = (double *) calloc(n, sizeof(double));","				            up[i] = (double *) calloc(n, sizeof(double));","					        }","",>29
|<"		        double x1 = 10.0;","			    double x2 = 20.0;","			        double y1 = 30.0;","				    double y2 = 20.0;","				        u[0][0] = up[0][0] = x1;","					    u[0][n-1] = up[0][n-1] = x2;","					        u[n-1][0] = up[n-1][0] = y1;","						    u[n-1][n-1] = up[n-1][n-1] = y2;","","						        double step1 = (x2 - x1)/(n-1);","							    double step2 = (y2 - y1)/(n-1);","							        double step3 = (y1 - x1)/(n-1);","#pragma acc loop independent",>42
|<"								    for (int i = 1; i<n-1; i++){","									            u[0][i] = x1 + i*step1;","										            u[n-1][i] = y1 + i*step2;","											            u[i][0] = x1 + i*step3;","												            u[i][n-1] = 20.0;","													        }","","								        int itter = 0;","									    double error = 1.0;","","#pragma acc data copy(u[0:n][0:n], error) create (up[0:n][0:n])","									        {","											        while (itter < 1000000 && error > 1e-6) {",>49
|<"													            if (itter % 100 == 0){","#pragma acc kernels async","															                    error = 0;","																	                }","														                itter++;","#pragma acc data present(u, up)","#pragma acc parallel num_gangs(n) async","																            {","#pragma acc loop collapse(2) independent reduction(max:error)","																		                    for (int i = 1; i < n - 1; i++) {",>80
|<"																					                        for (int j = 1; j < n - 1; j++) {"
"6	LINE	0
	#include <stdio.h>
	#include <stdlib.h>
	#include <math.h>
	#define n 128
	
	int main() {
		    double **u = (double **) calloc(n, sizeof(double *)); // first
		        double **up = (double **) calloc(n, sizeof(double *));  // second
			    for (int i = 0; i < n; i++) {
				            u[i] = (double *) calloc(n, sizeof(double));
					            up[i] = (double *) calloc(n, sizeof(double));
						        }
	
			        double x1 = 10.0;
				    double x2 = 20.0;
				        double y1 = 30.0;
					    double y2 = 20.0;
					        u[0][0] = up[0][0] = x1;
						    u[0][n-1] = up[0][n-1] = x2;
						        u[n-1][0] = up[n-1][0] = y1;
							    u[n-1][n-1] = up[n-1][n-1] = y2;
	
							        double step1 = (x2 - x1)/(n-1);
								    double step2 = (y2 - y1)/(n-1);
								        double step3 = (y1 - x1)/(n-1);
	#pragma acc loop independent
									    for (int i = 1; i<n-1; i++){
										            u[0][i] = x1 + i*step1;
											            u[n-1][i] = y1 + i*step2;
												            u[i][0] = x1 + i*step3;
													            u[i][n-1] = 20.0;
														        }
	
									        int itter = 0;
										    double error = 1.0;
	
	#pragma acc data copy(u[0:n][0:n], error) create (up[0:n][0:n])
										        {
												        while (itter < 1000000 && error > 1e-6) {
														            itter++;
															                if (itter % 100 == 0){
	#pragma acc kernels async
																		                error = 0;
																				            }
	#pragma acc data present(u, up)
	#pragma acc parallel num_gangs(n) async
																	            {
	#pragma acc loop collapse(2) independent reduction(max:error)
																			                    for (int i = 1; i < n - 1; i++) {
																						                        for (int j = 1; j < n - 1; j++) {
|3,0,6,1,50,0,1646283433,"#include <stdio.h>","#include <stdlib.h>","#include <math.h>","#define n 128","","int main() {","	    double **u = (double **) calloc(n, sizeof(double *)); // first","	        double **up = (double **) calloc(n, sizeof(double *));  // second","		    for (int i = 0; i < n; i++) {","			            u[i] = (double *) calloc(n, sizeof(double));","				            up[i] = (double *) calloc(n, sizeof(double));","					        }","",>29
|<"		        double x1 = 10.0;","			    double x2 = 20.0;","			        double y1 = 30.0;","				    double y2 = 20.0;","				        u[0][0] = up[0][0] = x1;","					    u[0][n-1] = up[0][n-1] = x2;","					        u[n-1][0] = up[n-1][0] = y1;","						    u[n-1][n-1] = up[n-1][n-1] = y2;","","						        double step1 = (x2 - x1)/(n-1);","							    double step2 = (y2 - y1)/(n-1);","							        double step3 = (y1 - x1)/(n-1);","#pragma acc loop independent",>42
|<"								    for (int i = 1; i<n-1; i++){","									            u[0][i] = x1 + i*step1;","										            u[n-1][i] = y1 + i*step2;","											            u[i][0] = x1 + i*step3;","												            u[i][n-1] = 20.0;","													        }","","								        int itter = 0;","									    double error = 1.0;","","#pragma acc data copy(u[0:n][0:n], error) create (up[0:n][0:n])","									        {","											        while (itter < 1000000 && error > 1e-6) {",>35
|<"													            itter++;","														                if (itter % 100 == 0){","#pragma acc kernels async","																	                error = 0;","																			            }","#pragma acc data present(u, up)","#pragma acc parallel num_gangs(n) async","																            {","#pragma acc loop collapse(2) independent reduction(max:error)","																		                    for (int i = 1; i < n - 1; i++) {",>80
|<"																					                        for (int j = 1; j < n - 1; j++) {"
"7	LINE	0
	#include <stdio.h>
	#include <stdlib.h>
	#include <math.h>
	#define n 128
	
	int main() {
		    double **u = (double **) calloc(n, sizeof(double *)); // first
		        double **up = (double **) calloc(n, sizeof(double *));  // second
			    for (int i = 0; i < n; i++) {
				            u[i] = (double *) calloc(n, sizeof(double));
					            up[i] = (double *) calloc(n, sizeof(double));
						        }
	
			        double x1 = 10.0;
				    double x2 = 20.0;
				        double y1 = 30.0;
					    double y2 = 20.0;
					        u[0][0] = up[0][0] = x1;
						    u[0][n-1] = up[0][n-1] = x2;
						        u[n-1][0] = up[n-1][0] = y1;
							    u[n-1][n-1] = up[n-1][n-1] = y2;
	
							        double step1 = (x2 - x1)/(n-1);
								    double step2 = (y2 - y1)/(n-1);
								        double step3 = (y1 - x1)/(n-1);
	#pragma acc loop independent
									    for (int i = 1; i<n-1; i++){
										            u[0][i] = x1 + i*step1;
											            u[n-1][i] = y1 + i*step2;
												            u[i][0] = x1 + i*step3;
													            u[i][n-1] = 20.0;
														        }
	
									        int itter = 0;
										    double error = 1.0;
	
	#pragma acc data copy(u[0:n][0:n], error) create (up[0:n][0:n])
										        {
												        while (itter < 1000000 && error > 1e-6) {
														            itter++;
															                if (itter % 100 == 0){
	#pragma acc kernels async
																		                error = 0;
																				            }
	#pragma acc data present(u, up)
	#pragma acc parallel num_gangs(n) async
																	            {
	#pragma acc loop collapse(2) independent reduction(max:error)
																			                    for (int i = 1; i < n - 1; i++) {
																						                        for (int j = 1; j < n - 1; j++) {
|3,0,7,1,50,0,1646283145,"#include <stdio.h>","#include <stdlib.h>","#include <math.h>","#define n 128","","int main() {","	    double **u = (double **) calloc(n, sizeof(double *)); // first","	        double **up = (double **) calloc(n, sizeof(double *));  // second","		    for (int i = 0; i < n; i++) {","			            u[i] = (double *) calloc(n, sizeof(double));","				            up[i] = (double *) calloc(n, sizeof(double));","					        }","",>29
|<"		        double x1 = 10.0;","			    double x2 = 20.0;","			        double y1 = 30.0;","				    double y2 = 20.0;","				        u[0][0] = up[0][0] = x1;","					    u[0][n-1] = up[0][n-1] = x2;","					        u[n-1][0] = up[n-1][0] = y1;","						    u[n-1][n-1] = up[n-1][n-1] = y2;","","						        double step1 = (x2 - x1)/(n-1);","							    double step2 = (y2 - y1)/(n-1);","							        double step3 = (y1 - x1)/(n-1);","#pragma acc loop independent",>42
|<"								    for (int i = 1; i<n-1; i++){","									            u[0][i] = x1 + i*step1;","										            u[n-1][i] = y1 + i*step2;","											            u[i][0] = x1 + i*step3;","												            u[i][n-1] = 20.0;","													        }","","								        int itter = 0;","									    double error = 1.0;","","#pragma acc data copy(u[0:n][0:n], error) create (up[0:n][0:n])","									        {","											        while (itter < 1000000 && error > 1e-6) {",>35
|<"													            itter++;","														                if (itter % 100 == 0){","#pragma acc kernels async","																	                error = 0;","																			            }","#pragma acc data present(u, up)","#pragma acc parallel num_gangs(n) async","																            {","#pragma acc loop collapse(2) independent reduction(max:error)","																		                    for (int i = 1; i < n - 1; i++) {",>80
|<"																					                        for (int j = 1; j < n - 1; j++) {"
"8	LINE	0
	#include <stdio.h>
	#include <stdlib.h>
	#include <math.h>
	#define n 128
	
	int main() {
		    double **u = (double **) calloc(n, sizeof(double *)); // first
		        double **up = (double **) calloc(n, sizeof(double *));  // second
			    for (int i = 0; i < n; i++) {
				            u[i] = (double *) calloc(n, sizeof(double));
					            up[i] = (double *) calloc(n, sizeof(double));
						        }
	
			        double x1 = 10.0;
				    double x2 = 20.0;
				        double y1 = 30.0;
					    double y2 = 20.0;
					        u[0][0] = up[0][0] = x1;
						    u[0][n-1] = up[0][n-1] = x2;
						        u[n-1][0] = up[n-1][0] = y1;
							    u[n-1][n-1] = up[n-1][n-1] = y2;
	
							        double step1 = (x2 - x1)/(n-1);
								    double step2 = (y2 - y1)/(n-1);
								        double step3 = (y1 - x1)/(n-1);
	#pragma acc loop independent
									    for (int i = 1; i<n-1; i++){
										            u[0][i] = x1 + i*step1;
											            u[n-1][i] = y1 + i*step2;
												            u[i][0] = x1 + i*step3;
													            u[i][n-1] = 20.0;
														        }
	
									        int itter = 0;
										    double error = 1.0;
	
	#pragma acc data copy(u[0:n][0:n], error) create (up[0:n][0:n])
										        {
												        while (itter < 1000000 && error > 1e-6) {
														            itter++;
															                if (itter % 100 == 0){
	#pragma acc kernels async
																		                error = 0;
																				            }
	#pragma acc data present(u, up)
	#pragma acc parallel num_gangs(n) async
																	            {
	#pragma acc loop collapse(2) independent reduction(max:error)
																			                    for (int i = 1; i < n - 1; i++) {
																						                        for (int j = 1; j < n - 1; j++) {
|3,0,8,1,50,0,1646282880,"#include <stdio.h>","#include <stdlib.h>","#include <math.h>","#define n 128","","int main() {","	    double **u = (double **) calloc(n, sizeof(double *)); // first","	        double **up = (double **) calloc(n, sizeof(double *));  // second","		    for (int i = 0; i < n; i++) {","			            u[i] = (double *) calloc(n, sizeof(double));","				            up[i] = (double *) calloc(n, sizeof(double));","					        }","",>29
|<"		        double x1 = 10.0;","			    double x2 = 20.0;","			        double y1 = 30.0;","				    double y2 = 20.0;","				        u[0][0] = up[0][0] = x1;","					    u[0][n-1] = up[0][n-1] = x2;","					        u[n-1][0] = up[n-1][0] = y1;","						    u[n-1][n-1] = up[n-1][n-1] = y2;","","						        double step1 = (x2 - x1)/(n-1);","							    double step2 = (y2 - y1)/(n-1);","							        double step3 = (y1 - x1)/(n-1);","#pragma acc loop independent",>42
|<"								    for (int i = 1; i<n-1; i++){","									            u[0][i] = x1 + i*step1;","										            u[n-1][i] = y1 + i*step2;","											            u[i][0] = x1 + i*step3;","												            u[i][n-1] = 20.0;","													        }","","								        int itter = 0;","									    double error = 1.0;","","#pragma acc data copy(u[0:n][0:n], error) create (up[0:n][0:n])","									        {","											        while (itter < 1000000 && error > 1e-6) {",>35
|<"													            itter++;","														                if (itter % 100 == 0){","#pragma acc kernels async","																	                error = 0;","																			            }","#pragma acc data present(u, up)","#pragma acc parallel num_gangs(n) async","																            {","#pragma acc loop collapse(2) independent reduction(max:error)","																		                    for (int i = 1; i < n - 1; i++) {",>80
|<"																					                        for (int j = 1; j < n - 1; j++) {"
"9	LINE	0
	#include <stdio.h>
	#include <stdlib.h>
	#include <math.h>
	#define n 128
	
	int main() {
		    double **u = (double **) calloc(n, sizeof(double *)); // first
		        double **up = (double **) calloc(n, sizeof(double *));  // second
			    for (int i = 0; i < n; i++) {
				            u[i] = (double *) calloc(n, sizeof(double));
					            up[i] = (double *) calloc(n, sizeof(double));
						        }
	
			        double x1 = 10.0;
				    double x2 = 20.0;
				        double y1 = 30.0;
					    double y2 = 20.0;
					        u[0][0] = up[0][0] = x1;
						    u[0][n-1] = up[0][n-1] = x2;
						        u[n-1][0] = up[n-1][0] = y1;
							    u[n-1][n-1] = up[n-1][n-1] = y2;
	
							        double step1 = (x2 - x1)/(n-1);
								    double step2 = (y2 - y1)/(n-1);
								        double step3 = (y1 - x1)/(n-1);
	#pragma acc loop independent
									    for (int i = 1; i<n-1; i++){
										            u[0][i] = x1 + i*step1;
											            u[n-1][i] = y1 + i*step2;
												            u[i][0] = x1 + i*step3;
													            u[i][n-1] = 20.0;
														        }
	
									        int itter = 0;
										    double error = 1.0;
	
	#pragma acc data copy(u[0:n][0:n], error) create (up[0:n][0:n])
										        {
												        while (itter < 1000000 && error > 1e-6) {
														            itter++;
															                if (itter % 100 == 0){
																		                error = 0;
																				            }
	#pragma acc data present(u, up)
	#pragma acc parallel num_gangs(n) async
																	            {
	#pragma acc loop collapse(2) independent reduction(max:error)
																			                    for (int i = 1; i < n - 1; i++) {
																						                        for (int j = 1; j < n - 1; j++) {
																										                        up[i][j] = 0.25 * (u[i][j - 1] + u[i][j + 1] + u[i + 1][j] + u[i - 1][j]);
|3,0,9,1,50,0,1646282648,"#include <stdio.h>","#include <stdlib.h>","#include <math.h>","#define n 128","","int main() {","	    double **u = (double **) calloc(n, sizeof(double *)); // first","	        double **up = (double **) calloc(n, sizeof(double *));  // second","		    for (int i = 0; i < n; i++) {","			            u[i] = (double *) calloc(n, sizeof(double));","				            up[i] = (double *) calloc(n, sizeof(double));","					        }","",>29
|<"		        double x1 = 10.0;","			    double x2 = 20.0;","			        double y1 = 30.0;","				    double y2 = 20.0;","				        u[0][0] = up[0][0] = x1;","					    u[0][n-1] = up[0][n-1] = x2;","					        u[n-1][0] = up[n-1][0] = y1;","						    u[n-1][n-1] = up[n-1][n-1] = y2;","","						        double step1 = (x2 - x1)/(n-1);","							    double step2 = (y2 - y1)/(n-1);","							        double step3 = (y1 - x1)/(n-1);","#pragma acc loop independent",>42
|<"								    for (int i = 1; i<n-1; i++){","									            u[0][i] = x1 + i*step1;","										            u[n-1][i] = y1 + i*step2;","											            u[i][0] = x1 + i*step3;","												            u[i][n-1] = 20.0;","													        }","","								        int itter = 0;","									    double error = 1.0;","","#pragma acc data copy(u[0:n][0:n], error) create (up[0:n][0:n])","									        {","											        while (itter < 1000000 && error > 1e-6) {",>35
|<"													            itter++;","														                if (itter % 100 == 0){","																	                error = 0;","																			            }","#pragma acc data present(u, up)","#pragma acc parallel num_gangs(n) async","																            {","#pragma acc loop collapse(2) independent reduction(max:error)","																		                    for (int i = 1; i < n - 1; i++) {",>80
|<"																					                        for (int j = 1; j < n - 1; j++) {","																									                        up[i][j] = 0.25 * (u[i][j - 1] + u[i][j + 1] + u[i + 1][j] + u[i - 1][j]);"
"-	CHAR	0
	p
|3,0,36,0,1,0,1646274673,"p"

# File marks:
'0  61  0  ~/er.c
|4,48,61,0,1646880522,"~/er.c"
'1  2  0  ~/er.c
|4,49,2,0,1646879911,"~/er.c"
'2  63  0  ~/er.c
|4,50,63,0,1646879911,"~/er.c"
'3  2  0  ~/er.c
|4,51,2,0,1646879903,"~/er.c"
'4  63  0  ~/er.c
|4,52,63,0,1646879903,"~/er.c"
'5  1  1  ~/er.c
|4,53,1,1,1646878986,"~/er.c"
'6  1  1  ~/er.c
|4,54,1,1,1646878986,"~/er.c"
'7  1  1  ~/er.c
|4,55,1,1,1646878986,"~/er.c"
'8  1  1  ~/er.c
|4,56,1,1,1646878986,"~/er.c"
'9  1  1  ~/er.c
|4,57,1,1,1646878986,"~/er.c"

# Jumplist (newest first):
-'  61  0  ~/er.c
|4,39,61,0,1646880522,"~/er.c"
-'  1  0  ~/er.c
|4,39,1,0,1646880514,"~/er.c"
-'  2  0  ~/er.c
|4,39,2,0,1646879911,"~/er.c"
-'  63  0  ~/er.c
|4,39,63,0,1646879911,"~/er.c"
-'  63  0  ~/er.c
|4,39,63,0,1646879903,"~/er.c"
-'  1  0  ~/er.c
|4,39,1,0,1646879860,"~/er.c"
-'  1  0  ~/er.c
|4,39,1,0,1646879860,"~/er.c"
-'  1  1  ~/er.c
|4,39,1,1,1646878986,"~/er.c"
-'  1  1  ~/er.c
|4,39,1,1,1646284041,"~/er.c"
-'  43  0  ~/er.c
|4,39,43,0,1646284030,"~/er.c"
-'  43  0  ~/er.c
|4,39,43,0,1646284030,"~/er.c"
-'  104  0  ~/er.c
|4,39,104,0,1646284030,"~/er.c"
-'  43  0  ~/er.c
|4,39,43,0,1646284030,"~/er.c"
-'  104  0  ~/er.c
|4,39,104,0,1646284030,"~/er.c"
-'  104  0  ~/er.c
|4,39,104,0,1646284030,"~/er.c"
-'  104  0  ~/er.c
|4,39,104,0,1646284013,"~/er.c"
-'  1  0  ~/er.c
|4,39,1,0,1646284006,"~/er.c"
-'  76  0  ~/res.c
|4,39,76,0,1646283937,"~/res.c"
-'  76  0  ~/res.c
|4,39,76,0,1646283937,"~/res.c"
-'  76  0  ~/res.c
|4,39,76,0,1646283937,"~/res.c"
-'  76  0  ~/res.c
|4,39,76,0,1646283937,"~/res.c"
-'  76  0  ~/res.c
|4,39,76,0,1646283937,"~/res.c"
-'  76  0  ~/res.c
|4,39,76,0,1646283937,"~/res.c"
-'  76  0  ~/res.c
|4,39,76,0,1646283937,"~/res.c"
-'  76  0  ~/res.c
|4,39,76,0,1646283937,"~/res.c"
-'  76  0  ~/res.c
|4,39,76,0,1646283937,"~/res.c"
-'  76  0  ~/res.c
|4,39,76,0,1646283937,"~/res.c"
-'  76  0  ~/res.c
|4,39,76,0,1646283937,"~/res.c"
-'  76  0  ~/res.c
|4,39,76,0,1646283937,"~/res.c"
-'  76  0  ~/res.c
|4,39,76,0,1646283937,"~/res.c"
-'  76  0  ~/res.c
|4,39,76,0,1646283937,"~/res.c"
-'  76  0  ~/res.c
|4,39,76,0,1646283937,"~/res.c"
-'  76  0  ~/res.c
|4,39,76,0,1646283937,"~/res.c"
-'  76  0  ~/res.c
|4,39,76,0,1646283937,"~/res.c"
-'  76  0  ~/res.c
|4,39,76,0,1646283937,"~/res.c"
-'  76  0  ~/res.c
|4,39,76,0,1646283937,"~/res.c"
-'  76  0  ~/res.c
|4,39,76,0,1646283937,"~/res.c"
-'  76  0  ~/res.c
|4,39,76,0,1646283937,"~/res.c"
-'  76  0  ~/res.c
|4,39,76,0,1646283937,"~/res.c"
-'  76  0  ~/res.c
|4,39,76,0,1646283937,"~/res.c"
-'  76  0  ~/res.c
|4,39,76,0,1646283937,"~/res.c"
-'  76  0  ~/res.c
|4,39,76,0,1646283937,"~/res.c"
-'  76  0  ~/res.c
|4,39,76,0,1646283937,"~/res.c"
-'  76  0  ~/res.c
|4,39,76,0,1646283937,"~/res.c"
-'  76  0  ~/res.c
|4,39,76,0,1646283937,"~/res.c"
-'  76  0  ~/res.c
|4,39,76,0,1646283937,"~/res.c"
-'  76  0  ~/res.c
|4,39,76,0,1646283937,"~/res.c"
-'  76  0  ~/res.c
|4,39,76,0,1646283937,"~/res.c"
-'  76  0  ~/res.c
|4,39,76,0,1646283937,"~/res.c"
-'  76  0  ~/res.c
|4,39,76,0,1646283937,"~/res.c"
-'  76  0  ~/res.c
|4,39,76,0,1646283937,"~/res.c"
-'  76  0  ~/res.c
|4,39,76,0,1646283937,"~/res.c"
-'  76  0  ~/res.c
|4,39,76,0,1646283937,"~/res.c"
-'  76  0  ~/res.c
|4,39,76,0,1646283937,"~/res.c"
-'  76  0  ~/res.c
|4,39,76,0,1646283937,"~/res.c"
-'  76  0  ~/res.c
|4,39,76,0,1646283937,"~/res.c"
-'  76  0  ~/res.c
|4,39,76,0,1646283937,"~/res.c"
-'  76  0  ~/res.c
|4,39,76,0,1646283937,"~/res.c"
-'  76  0  ~/res.c
|4,39,76,0,1646283937,"~/res.c"
-'  76  0  ~/res.c
|4,39,76,0,1646283937,"~/res.c"
-'  76  0  ~/res.c
|4,39,76,0,1646283937,"~/res.c"
-'  76  0  ~/res.c
|4,39,76,0,1646283937,"~/res.c"
-'  76  0  ~/res.c
|4,39,76,0,1646283937,"~/res.c"
-'  76  0  ~/res.c
|4,39,76,0,1646283937,"~/res.c"
-'  76  0  ~/res.c
|4,39,76,0,1646283937,"~/res.c"
-'  76  0  ~/res.c
|4,39,76,0,1646283937,"~/res.c"
-'  76  0  ~/res.c
|4,39,76,0,1646283937,"~/res.c"
-'  76  0  ~/res.c
|4,39,76,0,1646283937,"~/res.c"
-'  76  0  ~/res.c
|4,39,76,0,1646283937,"~/res.c"
-'  76  0  ~/res.c
|4,39,76,0,1646283937,"~/res.c"
-'  76  0  ~/res.c
|4,39,76,0,1646283937,"~/res.c"
-'  76  0  ~/res.c
|4,39,76,0,1646283937,"~/res.c"
-'  76  0  ~/res.c
|4,39,76,0,1646283937,"~/res.c"
-'  76  0  ~/res.c
|4,39,76,0,1646283937,"~/res.c"
-'  76  0  ~/res.c
|4,39,76,0,1646283937,"~/res.c"
-'  76  0  ~/res.c
|4,39,76,0,1646283937,"~/res.c"
-'  76  0  ~/res.c
|4,39,76,0,1646283937,"~/res.c"
-'  76  0  ~/res.c
|4,39,76,0,1646283937,"~/res.c"
-'  76  0  ~/res.c
|4,39,76,0,1646283937,"~/res.c"
-'  76  0  ~/res.c
|4,39,76,0,1646283937,"~/res.c"
-'  76  0  ~/res.c
|4,39,76,0,1646283937,"~/res.c"
-'  1  0  ~/res.c
|4,39,1,0,1646283928,"~/res.c"
-'  1  0  ~/res.c
|4,39,1,0,1646283928,"~/res.c"
-'  1  0  ~/res.c
|4,39,1,0,1646283928,"~/res.c"
-'  1  0  ~/res.c
|4,39,1,0,1646283928,"~/res.c"
-'  1  0  ~/res.c
|4,39,1,0,1646283928,"~/res.c"
-'  1  0  ~/res.c
|4,39,1,0,1646283928,"~/res.c"
-'  1  0  ~/res.c
|4,39,1,0,1646283928,"~/res.c"
-'  1  0  ~/res.c
|4,39,1,0,1646283928,"~/res.c"
-'  1  0  ~/res.c
|4,39,1,0,1646283928,"~/res.c"
-'  1  0  ~/res.c
|4,39,1,0,1646283928,"~/res.c"
-'  1  0  ~/res.c
|4,39,1,0,1646283928,"~/res.c"
-'  1  0  ~/res.c
|4,39,1,0,1646283928,"~/res.c"
-'  1  0  ~/res.c
|4,39,1,0,1646283928,"~/res.c"
-'  1  0  ~/res.c
|4,39,1,0,1646283928,"~/res.c"
-'  1  0  ~/res.c
|4,39,1,0,1646283928,"~/res.c"
-'  1  0  ~/res.c
|4,39,1,0,1646283928,"~/res.c"
-'  1  0  ~/res.c
|4,39,1,0,1646283928,"~/res.c"
-'  1  0  ~/res.c
|4,39,1,0,1646283928,"~/res.c"
-'  1  0  ~/res.c
|4,39,1,0,1646283928,"~/res.c"

# History of marks within files (newest to oldest):

> ~/er.c
	*	1646880520	0
	"	61	0
	^	61	1
	.	61	0
	+	1	14
	+	1	18
	+	1	16
	+	1	0
	+	1	16
	+	1	1
	+	1	18
	+	2	0
	+	1	16
	+	61	0

> ~/res.c
	*	1646283935	0
	"	76	0
	^	76	1
	.	76	0
	+	1	18
	+	1	16
	+	1	0
	+	1	18
	+	76	0

> ~/ex1.c
	*	1646281216	0
	"	69	0
	^	69	1
	.	69	0
	+	1	16
	+	1	0
	+	1	16
	+	1	1
	+	1	16
	+	1	0
	+	1	16
	+	1	1
	+	1	18
	+	1	391
	+	1	18
	+	1	0
	+	1	4
	+	1	6
	+	1	13
	+	1	2
	+	1	1
	+	1	14
	+	1	28
	+	1	1
	+	1	14
	+	1	0
	+	1	24
	+	1	12
	+	1	18
	+	1	0
	+	1	18
	+	69	0

> ~/ex.c
	*	1645672671	0
	"	104	0
	^	104	1
	.	104	1
	+	104	1

> ~/main.c
	*	1645672220	0
	"	94	0
	^	94	1
	.	94	1
	+	94	1

> ~/Paralelism.c
	*	1645672050	0
	"	1	0
	^	1	0
	.	1	0
	+	1	18
	+	1	0
